x-restart: &restart
  condition: any

x-instances:
  api: &api-instances 5
  ui: &ui-instances 2

x-env: &env
  environment:
    BEHIND_PROXY: true
    DATABASE_MODE: pg
    DATABASE_HOST: db
    DATABASE_USERNAME: db
    DATABASE_PASSWORD: db
    DATABASE_NAME: db

x-ui: &ui
  environment:
    API_URL: http://api/info
    TERMS_OF_SERVICE_URL: https://example.com

###

services:
  traefik:
    image: traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.http.address=:80
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      restart_policy: *restart
      placement:
        constraints:
          - node.role == manager

  api_parent:
    image: ghcr.io/not-three/api:latest
    <<: *env
    deploy:
      restart_policy: *restart
      replicas: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/info"]
      interval: 30s
      timeout: 10s
      retries: 3

  api_child:
    image: ghcr.io/not-three/api:latest
    <<: *env
    deploy:
      restart_policy: *restart
      replicas: *api-instances
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"
        - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
        - "traefik.http.routers.api.entrypoints=http"
        - "traefik.http.services.api.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/info"]
      interval: 30s
      timeout: 10s
      retries: 3

  ui:
    image: ghcr.io/not-three/ui:latest
    <<: *ui
    deploy:
      restart_policy: *restart
      replicas: *ui-instances
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.ui.rule=PathPrefix(`/`)"
        - "traefik.http.routers.ui.entrypoints=http"
        - "traefik.http.services.ui.loadbalancer.server.port=4000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:14.5
    environment:
      POSTGRES_PASSWORD: db
      POSTGRES_USER: db
      POSTGRES_DB: db
    volumes:
      - db:/var/lib/postgresql/data
    deploy:
      restart_policy: *restart
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "db"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db:
